===================
carray User's Guide
===================

Introduction
============

carray at glance
----------------

carray is a Python package that provides containers for numerical data
that can be compressed in-memory.  It is highly based on NumPy, and
uses it as the standard way to communicate with carray objects.

The building blocks of carray objects are the so-called ``chunks``
that are compressed as a whole, but they can be decompressed partially
in order to improve the fetching of small parts of the array.

This ``chunked`` nature of the carray objects, together with a buffer
for performing I/O, makes appends very cheap and fetches reasonably
fast.  However, modification of values is an expensive operation.

The compresion/decompression process is carried out internally by
Blosc, a high-performance compressor that is optimized for binary
data.  That ensures maximum performance for I/O operation.

carray objects bring several advantages over NumPy::

  * Data is compressed: they take less memory space.

  * Efficent appends: you can append more data at the end of the
    objects very quickly.

  * Numexpr-powered: so that you can operate with compressed data in a
    fast and convenient way.


carray limitations
------------------

At this time, carray objects can only be uni-dimensional.  Newer
versions of the carray package might get rid of this limitation
though.


Installation
============

carray depends on NumPy (>= 1.4.1) and, optionally, Numexpr (>= 1.4).
Also, if you are going to install from sources, you will need Cython
(>= 0.13) and a C compiler (GCC or MSVC 2008 have been tested).

Installing from sources
-----------------------

Go to the carray main directory and do the typical distutils dance:

$ python setup.py install

Installing from Windows binaries
--------------------------------

Just download the binary installer and run it.


carray short tutorial
=====================

During all this tutorial, it is supposed that you are importing NumPy
and carray packages like this::

  >>> import numpy as np
  >>> import carray as ca

Creating carrays
----------------

A carray can be created from any NumPy ndarray by using its `carray`
constructor::

  >>> a = np.arange(10)
  >>> b = ca.carray(a)

Now, `b` is a carray object.  Just check this::

  >>> type(b)
  <type 'carray.carrayExtension.carray'>

You can have a peek at it by using its string form::

  >>> print b
  [0, 1, 2... 7, 8, 9]

And get more info about uncompressed size (nbytes), compressed
(cbytes) and the compression ratio (ratio = nbytes/cbytes), by using
its representation form::

  >>> b   # <==> print repr(b)
  carray((10,), int64)  nbytes: 80; cbytes: 4.00 KB; ratio: 0.02
    cparams := cparams(clevel=5, shuffle=True)
  [0 1 2 3 4 5 6 7 8 9]

As you can see, the compressed size is much larger than the
uncompressed one.  How this can be?  Well, it turns out that carray
wears an I/O buffer for accelerating some internal operations.  So,
for small arrays (typically those taking less than 1 MB), there is
little point in using a carray.

However, when creating carrays larger than 1 MB (its natural
scenario), the size of the I/O buffer is generally negligible in
comparison::

  >>> a = np.arange(1e7)
  >>> b = ca.carray(np.arange(1e7))
  >>> b
carray((10000000,), float64)  nbytes: 76.29 MB; cbytes: 2.57 MB; ratio: 29.72
  cparams := cparams(clevel=5, shuffle=True)
[0.0, 1.0, 2.0, ..., 9999997.0, 9999998.0, 9999999.0]

You can always get a hint on how much space it takes your carray by
using `sys.getsizeof()`::

  >>> import sys
  >>> sys.getsizeof(b)
  2691754

An interesting possibility is that you can create carrays from scratch
via the `fromiter()` constructor::

  >>> ca.fromiter((i*2. for i in xrange(1000*1000)), dtype="f4")
  carray((1000000,), float32)  nbytes: 3.81 MB; cbytes: 543.63 KB; ratio: 7.19
    cparams := cparams(clevel=5, shuffle=True)
  [0.0, 2.0, 4.0, ..., 1999994.0, 1999996.0, 1999998.0]

that means that you can create very large arrays without the need to
create a NumPy array first (that could not fit in memory) --but you
can achieve the same goal by using the `.append()` method discussed
later on.

Finally, you can get a copy of your created carrays by using the
`copy()` method::

  >>> b.copy()
  carray((10000000,), float64)  nbytes: 76.29 MB; cbytes: 2.57 MB; ratio: 29.72
    cparams := cparams(clevel=5, shuffle=True)
  [0.0, 1.0, 2.0, ..., 9999997.0, 9999998.0, 9999999.0]

and you can control parameters for the newly created copy::

  >>> b.copy(cparams=ca.cparams(clevel=9))
  carray((10000000,), float64)  nbytes: 76.29 MB; cbytes: 1.04 MB; ratio: 73.52
    cparams := cparams(clevel=9, shuffle=True)
  [0.0, 1.0, 2.0, ..., 9999997.0, 9999998.0, 9999999.0]

Enlarging your carray
---------------------

One of the nicest features of carray objects is that they can be
enlarged very efficiently.  This can be done via the `carray.append()`
method.

For example, if `b` is a carray with 10 million elements::

  >>> b
  carray((10000000,), float64)  nbytes: 80000000; cbytes: 2691722; ratio: 29.72
    cparams := cparams(clevel=5, shuffle=True)
  [0.0, 1.0, 2.0... 9999997.0, 9999998.0, 9999999.0]

it can be enlarged by 10 elements with::

  >>> b.append(np.arange(10.))
  10   # the number of rows appended
  >>> b
  carray((10000010,), float64)  nbytes: 80000080; cbytes: 2691722;  ratio: 29.72
    cparams := cparams(clevel=5, shuffle=True)
  [0.0, 1.0, 2.0... 7.0, 8.0, 9.0]

We can check that appending is very fast::

  In [5]: a = np.arange(1e7)

  In [6]: b = ca.carray(a)

  In [7]: time b.append(np.arange(1e7))
  CPU times: user 0.11 s, sys: 0.03 s, total: 0.14 s
  Wall time: 0.14 s
  Out[8]: 10000000

  In [9]: time np.concatenate((a, np.arange(1e7)))
  CPU times: user 0.11 s, sys: 0.09 s, total: 0.20 s
  Wall time: 0.22 s    # 1.6x slower than carray
  Out[10]:
  array([  0.00000000e+00,   1.00000000e+00,   2.00000000e+00, ...,
           9.99999700e+06,   9.99999800e+06,   9.99999900e+06])

This is specially true when appending small bits to large arrays::

  In [15]: b = ca.carray(a)

  In [16]: timeit b.append(np.arange(1e1))
  100000 loops, best of 3: 3.17 Âµs per loop

  In [17]: timeit np.concatenate((a, np.arange(1e1)))
  10 loops, best of 3: 64 ms per loop  # 2000x slower than carray

Definitely, appending is one of the strongests points of carray
objects, so do not be afraid to use it extensively.

Compression level and shuffle filter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

carray uses Blosc as the internal compressor, and Blosc can be
directed to use different compression levels and to use (or not) its
internal shuffle filter.  The shuffle filter is a way to improve
compression when using items that have type sizes > 1 byte, although
it might be counter-productive (very rarely) in some data
distributions.

By default carrays are compressed using Blosc with compression level 5
with shuffle active.  But depending on you needs, you can use other
compression levels too::

  >>> ca.carray(a, ca.cparams(clevel=1))
  carray((10000000,), float64)  nbytes: 80000000; cbytes: 10279111; ratio: 7.78
  [0.0, 1.0, 2.0... 9999997.0, 9999998.0, 9999999.0]

  >>> ca.carray(a, ca.cparams(clevel=9))
  carray((10000000,), float64)  nbytes: 80000000; cbytes: 1088152; ratio: 73.52
  [0.0, 1.0, 2.0... 9999997.0, 9999998.0, 9999999.0]

Also, you can decide if you want to disable the shuffle filter that
comes with Blosc::

  >>> ca.carray(a, ca.cparams(shuffle=False))
  carray((10000000,), float64)  nbytes: 80000000; cbytes: 38203113; ratio: 2.09
  [0.0, 1.0, 2.0... 9999997.0, 9999998.0, 9999999.0]

but, as you can see, the compression ratio is much worse in this case.
In general it is recommend to let shuffle active (unless you are
fine-tuning the performance for an specific carray).

See ``Optimization tips`` section for info on how you can change other
internal parameters like the size of the chunk.

Accessing carray data
---------------------

The way to access carray data is very similar to the NumPy indexing
scheme, and in fact, supports all the indexing methods supported by
NumPy.

Specifying an index or slice::

  >>> a = np.arange(10)
  >>> b = ca.carray(a)
  >>> b[0]
  0
  >>> b[-1]
  9
  >>> b[2:4]
  array([2, 3])
  >>> b[::2]
  array([0, 2, 4, 6, 8])
  >>> b[3:9:3]
  array([3, 6])

As you see, NumPy objects are returned as the result of an indexing
operation.  In fact, a handy way to get a NumPy array out of a carray
object is asking for the complete range:

  >>> b[:]
  array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

Fancy indexing is supported too.  Boolean arrays::

  >>> barr = np.array([True]*5+[False]*5)
  >>> b[barr]
  array([0, 1, 2, 3, 4])
  >>> b[ca.carray(barr)]
  array([0, 1, 2, 3, 4])

List of indices::

  >>> b[[2,3,0,2]]
  array([2, 3, 0, 2])
  >>> b[ca.carray([2,3,0,2])]
  array([2, 3, 0, 2])

Querying carrays
----------------

carrays can be queried in different ways.  The most easy, yet powerful
way is using its iterator::

  In [52]: a = np.arange(1e7)

  In [53]: b = ca.carray(a)

  In [54]: time sum(v for v in a if v < 10)
  CPU times: user 8.02 s, sys: 0.00 s, total: 8.03 s
  Wall time: 8.33 s
  Out[55]: 45.0

  In [56]: time sum(v for v in b if v < 10)
  CPU times: user 0.89 s, sys: 0.00 s, total: 0.90 s
  Wall time: 0.93 s   # 9x faster than NumPy
  Out[57]: 45.0

Also, you can quickly retrieve the indices of a boolean carray that
have a true value::

  In [68]: barr = ca.carray(a < 10)

  In [69]: [i for i in barr.wheretrue()]
  Out[69]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

And you can retrieve values where a boolean array is true::

  In [70]: [i for i in b.getif(barr)]
  Out[70]: [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]

The advantage of the carray iterators is that you can use them in
generator contexts and hence, you don't need to waste memory for
creating temporaries, which can be important when dealing with large
arrays.

Finally, all these iterators are very fast, so try express your
problems in a way that you can use them extensively.

Modifying carrays
-----------------

Although it is not a very efficient operation, carrays can be
modifyied too: You can do it by speficifying scalar or slice indices::

  >>> a = np.arange(10)
  >>> b = ca.carray(a)
  >>> b[1] = 10
  >>> print b
  [ 0 10  2  3  4  5  6  7  8  9]
  >>> b[1:4] = 10
  >>> print b
  [ 0 10 10 10  4  5  6  7  8  9]
  >>> b[1::3] = 10
  >>> print b
  [ 0 10 10 10 10  5  6 10  8  9]

and fancy indexing is supported too::

  >>> barr = np.array([True]*5+[False]*5)
  >>> b[barr] = -5
  >>> print b
  [-5 -5 -5 -5 -5  5  6 10  8  9]
  >>> b[[1,2,4,1]] = -10
  >>> print b
  [ -5 -10 -10  -5 -10   5   6  10   8   9]

However, modifying a carray is expensive::

  In [27]: a = np.arange(1e7)

  In [28]: b = ca.carray(a)

  In [29]: timeit a[2] = 3
  10000000 loops, best of 3: 101 ns per loop

  In [30]: timeit b[2] = 3
  10000 loops, best of 3: 161 Âµs per loop  # 1600x slower than NumPy

although modifying values in lastest chunk is somewhat cheaper::

  In [31]: timeit a[-1] = 3
  10000000 loops, best of 3: 102 ns per loop

  In [32]: timeit b[-1] = 3
  10000 loops, best of 3: 42.9 Âµs per loop  # 420x slower than NumPy

So, in general, you should avoid abusing of this feature when using
carrays.

carray metadata
---------------

carray implements a couple of attributes, `dtype` and `shape` that
makes it to 'quack' like a NumPy array::

  >>> a = np.arange(1e7)
  >>> b = ca.carray(a)
  >>> b.dtype
  dtype('float64')
  >>> b.shape
  (10000000,)

In addition, it implements the `cbytes` attribute that tells how many
bytes in memory uses the carray object::

  >>> b.cbytes
  2691722

This figure is approximate (the real one is a little larger) and it is
generally lower than the original (uncompressed) datasize can be
accessed by using `nbytes` attribute::

  >>> b.nbytes
  80000000

which is the same than the original NumPy array::

  >>> a.size*a.dtype.itemsize
  80000000

Finally, you can access the `chunklen` for this carray::

  >>> b.chunklen
  16384



Short Reference
===============

Utility functions
-----------------

* blosc_set_num_threads(nthreads)
    Set the number of threads that Blosc can use.

    Returns the previous setting for this number.

* blosc_version()
    Return the version of the Blosc library.

* detect_number_of_cores()
    Detect the number of cores on a system.


Optimization tips
=================

Changing explictly the length of chunks
---------------------------------------

You may want to use explictly the `chunklen` parameter to fine-tune
your compression levels::

  >>> a = np.arange(1e7)
  >>> ca.carray(a)
  carray((10000000,), float64)  nbytes: 76.29 MB; cbytes: 2.57 MB; ratio: 29.72
    cparams := cparams(clevel=5, shuffle=True)
  [0.0, 1.0, 2.0, ..., 9999997.0, 9999998.0, 9999999.0]
  >>> ca.carray(a).chunklen
  16384   # 128 KB = 16384 * 8 is the default chunk size for this carray
  >>> ca.carray(a, chunklen=512)
  carray((10000000,), float64)  nbytes: 76.29 MB; cbytes: 10.20 MB; ratio: 7.48
    cparams := cparams(clevel=5, shuffle=True)
  [0.0, 1.0, 2.0, ..., 9999997.0, 9999998.0, 9999999.0]
  >>> ca.carray(a, chunklen=8*1024)
  carray((10000000,), float64)  nbytes: 76.29 MB; cbytes: 1.50 MB; ratio: 50.88
    cparams := cparams(clevel=5, shuffle=True)
  [0.0, 1.0, 2.0, ..., 9999997.0, 9999998.0, 9999999.0]

As you can see, the length of the chunk affects very much compression
levels and the performance of I/O to carrays too.

In general, however, it is safer (and quicker!) to use the
`expectedlen` parameter (see next section).

Informing about the length of your carrays
------------------------------------------

If you are going to add a lot of rows to your carrays, be sure to use
the `expectedlen` parameter in creating time to inform the constructor
about the expected length of your final carray.  This allows carray to
fine-tune the length of its chunks more easily::

  >>> a = np.arange(1e7)
  >>> ca.carray(a, expectedlen=10).chunklen
  512
  >>> ca.carray(a, expectedlen=10*1000).chunklen
  4096
  >>> ca.carray(a, expectedlen=10*1000*1000).chunklen
  16384
  >>> ca.carray(a, expectedlen=10*1000*1000*1000).chunklen
  131072




.. Local Variables:
.. mode: rst
.. coding: utf-8
.. fill-column: 70
.. End:
