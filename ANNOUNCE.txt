=====================
Announcing carray 0.3
=====================

What's new
==========

The most outstanding feature in this version is the introduction of a
`ctable` object.  A `ctable` is similar to a structured array in NumPy,
but instead of storing the data row-wise, it uses a column-wise
arrangement.  This allows for much better performance for very wide
tables, which is one of the scenarios where a `ctable` makes more sense.
Of course, as `ctable` is based on `carray` objects, it inherits all its
niceties (like on-the-flight compression and fast iterators).

Also, the `carray` object itself has received many improvements, like
new constructors (arange(), fromiter(), zeros(), ones(), fill()),
iterators (where(), wheretrue()) or resize mehtods (resize(), trim()).
Most of these also work with the new `ctable`.

Finally, Numexpr is supported now (but it is optional) in order to carry
out stunningly fast queries on `ctable` objects.  For example, doing a
query on a table with one million rows and one thousand columns can be
up to 2x faster than using a plain structured array, and up to 20x
faster than using SQLite (using the ":memory:" backend and indexing).
See 'bench/ctable-query.py' for details.

What it is
==========

carray is a container for numerical data that can be compressed
in-memory.  The compresion process is carried out internally by Blosc,
a high-performance compressor that is optimized for binary data.

Having data compressed in-memory can reduce the stress of the memory
subsystem.  The net result is that carray operations may be faster than
using a traditional ndarray object from NumPy.

carray also supports fully 64-bit addressing (both in UNIX and Windows).
Below, a carray with 1 trillion of rows has been created and summed-up
(please note that this is an extreme example only!)::

  >>> %time b = ca.ones(1e12)
  CPU times: user 54.76 s, sys: 0.03 s, total: 54.79 s
  Wall time: 55.23 s
  >>> b
  carray((1000000000000,), float64)
    nbytes: 7450.58 GB; cbytes: 2.27 GB; ratio: 3275.39
    cparams := cparams(clevel=5, shuffle=True)
  [1.0, 1.0, 1.0, ..., 1.0, 1.0, 1.0]
  >>> %time b.sum()
  CPU times: user 10.48 s, sys: 0.00 s, total: 10.48 s
  Wall time: 10.48 s
  1000000000000.0

Resources
=========

Visit the main carray site repository at:
http://github.com/FrancescAlted/carray

You can download a source package from:
http://carray.pytables.org/downloads

Manual:
http://carray.pytables.org/manual

Home of Blosc compressor:
http://blosc.pytables.org

User's mail list:
carray@googlegroups.com
http://groups.google.com/group/carray

Share your experience
=====================

Let us know of any bugs, suggestions, gripes, kudos, etc. you may
have.

----

   Enjoy!

.. Local Variables:
.. mode: rst
.. coding: utf-8
.. fill-column: 72
.. End:
