============================
Release notes for carray 0.2
============================

:Author: Francesc Alted i Abad
:Contact: faltet@pytables.org


Changes from 0.2 to 0.3
=======================

- Added a new `ctable` class that implements a compressed, column-wise
  table.

- Added new `__len__()` and `__sizeof__()` special methods for both
  `carray` and `ctable` objects.

- Added new `nbytes` and `cbytes` properties for `carray` and `ctable`
  objects.  The former accounts for the size of the original
  (non-compressed) object, and the later for the actual compressed
  object.

- New algorithm for computing an optimal chunksize for carrays based on
  the new `expectedrows` argument.

- Added `chunksize` property for `carray` that allows querying the
  chunksize for the internal I/O buffer.

- Added a new `append(rows)` method to `ctable` class.

- Added a new `where()` iterator for `carray` that mimics the
  `nonzero()` method in NumPy.

- Added a new `getif(boolarr)` iterator for `carray` that returns values
  only on those places where `boolarr` is true.  Also, calling
  ``carray[boolarr]`` is the same than `carray.getif(boolarr)`.

- Added a new `eval()` method for `ctable` that is able to evaluate
  expressions with columns.  It needs numexpr to be installed.

- Idiom ``ctable[boolexpr]`` is recognized now and returns the rows
  fullfilling the boolean expression.  Needs numexpr.

- Idiom ``ctable[boolarr]`` is recognized now and returns the rows where
  the boolean array is true.

- Added `copy(clevel, shuffle)` method to both `carray` and `ctable`
  objects.

- Removed the `toarray()` method in `carray` as this was equivalent to
  ``carray[:]`` idiom.

- Renamed `setBloscMaxThreads()` to `blosc_set_num_threads()` and
  `whichLibVersion()` to `blosc_version()` to follow carray name
  conventions more closely.

- Added a new `set_num_threads()` to set the number of threads in both
  Blosc and Numexpr (if available).


Changes from 0.1 to 0.2
=======================

- Added a couple of iterators for carray: `__iter__()` and `iter(start,
  stop, step)`.  The difference is that the later does accept slices.
  See ``Using iterators`` in USAGE.txt.

- Added a `__len__()` method.


.. Local Variables:
.. mode: rst
.. coding: utf-8
.. fill-column: 72
.. End:
